From AG Require Export Basics.

Check bin_to_nat. (*Export works*)

Definition  add_0_r : forall  n:nat, n + 0 = n.
intro n. induction n  as [| n' IH].
  - reflexivity.
  - simpl. rewrite IH. reflexivity.
Defined.

Definition  minus_n_n : forall  n, minus n n = 0.
  intro n. induction n as [| n' IH].
  - simpl. reflexivity.
  - simpl. apply IH.
Defined.

Definition mul_0_r : forall n : nat, n * 0 = 0.
  intro n. induction n as [| n' IH].
  - simpl. reflexivity.
  - simpl. apply IH.
Defined.

Definition plus_n_Sm : forall n m : nat, S (n + m) = n + (S m).
  intros n m. induction n as [| n' IH].
  - simpl. reflexivity.
  - simpl. rewrite IH. reflexivity.
Defined.

Definition add_comm : forall n m : nat, n + m = m + n.
  intros n m. induction m as [|m IHm].
  - simpl. rewrite (add_0_r n). reflexivity.
  - simpl. rewrite <-  plus_n_Sm. rewrite IHm. reflexivity.
Defined.

Definition add_assoc : forall  n m p : nat,  n + (m + p) = (n + m) + p.
  intros n m p. induction n as [|n IHn].
  - simpl. reflexivity.
  - simpl. rewrite IHn. reflexivity.
Defined.

Fixpoint double (n:nat) :=
  match n with
  | O => O
  | S n' => S (S (double n'))
  end.

Definition double_plus : forall n, double n = n + n.
  intro n. induction n as [| n IHn].
  - simpl. reflexivity.
  -  simpl. rewrite IHn. Search plus. rewrite plus_n_Sm. reflexivity.
Defined.

Definition even_S : forall n : nat, even (S n) = negb (even n).
  intro n. induction n as [|n IHn].
  - simpl. reflexivity.
  - rewrite ->  IHn. simpl. Search negb. rewrite negb_involutive. reflexivity.
Defined.

Definition plus_rearrange : forall n m p q : nat, (n + m) + (p + q) = (m + n) + (p + q).
  intros n m p q. assert (H_comm : n + m = m + n).
  {rewrite add_comm. reflexivity. }(*Note: Assertions are non-transparent*)
  rewrite H_comm. reflexivity.
Defined.

(*Exercises*)

Definition add_shuffle3 : forall n m p : nat, n + (m+p) = m + (n + p).
  intros n m p. destruct n as [| n Sn].
  - simpl. reflexivity.
  - Search plus. rewrite plus_Sn_m. rewrite plus_Sn_m. rewrite <-  plus_n_Sm. rewrite add_assoc. rewrite  (add_comm n m). rewrite add_assoc. reflexivity.
Defined.

Definition mul_comm : forall n m : nat, n * m = m * n.
  intros n m. induction n as [| n IHn].
  - simpl. Search mult. rewrite <- mult_n_O. reflexivity.
  - simpl. Search mult. rewrite <-  mult_n_Sm. rewrite IHn. rewrite add_comm. reflexivity.
Defined.

Check leb.

Definition leb_refl : forall n : nat, (n <=? n) = true.
  intro n. induction  n.
  - simpl. reflexivity.
  - simpl. assumption.
Defined.

Definition zero_neqb_S : forall n : nat, 0 =? (S n) = false.
  intro n. simpl. reflexivity.
Defined.

Definition andb_false_r : forall b : bool, andb b false = false.
  intro b. destruct b as [].
  - simpl. reflexivity.
  - simpl. reflexivity.
Defined.

Definition plus_leb_compat_1 : forall n m p : nat, n <=? m = true -> (p + n) <=? (p + m) = true.
  intros n m p q. induction p as [| p IHp].
  - simpl. assumption.
  - simpl. assumption.
Defined.

Definition S_neqb_0 : forall n : nat, (S n) =? 0 = false.
  intro n. destruct n.
  - simpl. reflexivity.
  - simpl. reflexivity.
Defined.

Definition mult_1_1 : forall n : nat, 1 * n = n.
  intro n. rewrite mul_comm. Search mult. rewrite mult_n_1. reflexivity.
Defined.

Definition all3_spec : forall b c : bool,
    orb (andb b c) (orb (negb b) (negb c)) = true.
  intros b c. destruct b.
  - simpl. destruct c.
    + simpl. reflexivity.
    + simpl. reflexivity.
  - simpl. reflexivity.
Defined.

Definition mult_plus_distr_r : forall n m p : nat, (n + m) * p = (n * p) + (m * p).
  intros n m p. induction n.
  - simpl. reflexivity.
  - simpl.rewrite IHn. rewrite add_assoc. reflexivity.
Defined.

Definition mult_assoc : forall n m p : nat,
    n * (m * p) = (n * m) * p.
  intros n m p. induction n.
  - simpl. reflexivity.
  - simpl. rewrite mult_plus_distr_r. rewrite IHn. reflexivity.
Defined.

Definition eqb_refl : forall n : nat, (n =? n) = true.
  intro n. induction n.
  - simpl. reflexivity.
  - simpl. assumption.
Defined.

(*"Replace" tactic*)

